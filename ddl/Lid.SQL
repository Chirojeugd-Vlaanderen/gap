--   -------------------------------------------------- 
--   Generated by Enterprise Architect Version 7.1.829
--   Created On : zaterdag, 23 mei, 2009 
--   DBMS       : SQL Server 2000 
--   -------------------------------------------------- 

USE ChiroGroep
;

--  Drop Foreign Key Constraints 
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('lid.FK_Afdeling_Groep') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE lid.Afdeling DROP CONSTRAINT FK_Afdeling_Groep
;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('lid.FK_AfdelingsJaar_Afdeling') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE lid.AfdelingsJaar DROP CONSTRAINT FK_AfdelingsJaar_Afdeling
;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('lid.FK_AfdelingsJaar_GroepsWerkjaar') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE lid.AfdelingsJaar DROP CONSTRAINT FK_AfdelingsJaar_GroepsWerkjaar
;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('lid.FK_AfdelingsJaar_OfficieleAfdeling') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE lid.AfdelingsJaar DROP CONSTRAINT FK_AfdelingsJaar_OfficieleAfdeling
;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('lid.FK_Kind_AfdelingsJaar') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE lid.Kind DROP CONSTRAINT FK_Kind_AfdelingsJaar
;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('lid.FK_Kind_Lid') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE lid.Kind DROP CONSTRAINT FK_Kind_Lid
;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('lid.FK_Leiding_Lid') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE lid.Leiding DROP CONSTRAINT FK_Leiding_Lid
;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('lid.FK_LeidingInAfdelingsJaar_AfdelingsJaar') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE lid.LeidingInAfdelingsJaar DROP CONSTRAINT FK_LeidingInAfdelingsJaar_AfdelingsJaar
;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('lid.FK_LeidingInAfdelingsJaar_Leiding') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE lid.LeidingInAfdelingsJaar DROP CONSTRAINT FK_LeidingInAfdelingsJaar_Leiding
;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('lid.FK_Lid_GelieerdePersoon') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE lid.Lid DROP CONSTRAINT FK_Lid_GelieerdePersoon
;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('lid.FK_Lid_GroepsWerkjaar') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE lid.Lid DROP CONSTRAINT FK_Lid_GroepsWerkjaar
;


--  Drop Tables, Stored Procedures and Views 
IF EXISTS (SELECT * FROM dbo.SYSOBJECTS WHERE id = object_id('lid.Afdeling') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE lid.Afdeling
;

IF EXISTS (SELECT * FROM dbo.SYSOBJECTS WHERE id = object_id('lid.AfdelingsJaar') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE lid.AfdelingsJaar
;

IF EXISTS (SELECT * FROM dbo.SYSOBJECTS WHERE id = object_id('lid.Kind') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE lid.Kind
;

IF EXISTS (SELECT * FROM dbo.SYSOBJECTS WHERE id = object_id('lid.Leiding') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE lid.Leiding
;

IF EXISTS (SELECT * FROM dbo.SYSOBJECTS WHERE id = object_id('lid.LeidingInAfdelingsJaar') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE lid.LeidingInAfdelingsJaar
;

IF EXISTS (SELECT * FROM dbo.SYSOBJECTS WHERE id = object_id('lid.Lid') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE lid.Lid
;

IF EXISTS (SELECT * FROM dbo.SYSOBJECTS WHERE id = object_id('lid.OfficieleAfdeling') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE lid.OfficieleAfdeling
;




--  Create Tables 
CREATE TABLE lid.Afdeling ( 
	AfdelingsNaam varchar(50) NOT NULL,
	Afkorting varchar(10) NULL,
	afdelingID int identity(1,1)  NOT NULL,
	groepID int NULL
)
;

CREATE TABLE lid.AfdelingsJaar ( 
	GeboorteJaarTot int NULL,    --  geboortejaar 'tot en met' 
	GeboorteJaarVan int NULL,    --  geboortejaar 'vanaf' 
	afdelingsJaarID int identity(1,1)  NOT NULL,
	afdelingID int NULL,
	groepsWerkjaarID int NULL,
	officieleAfdelingID int NULL
)
;

CREATE TABLE lid.Kind ( 
	EindeInstapPeriode smalldatetime NULL,    --  Er worden enkel  facturen gemaakt voor dit lid als deze datum gepasseerd is.  Tot dat moment kan de groep beslissen om deze persoon uit te schrijven.  Daarna vanzelfsprekend niet meer. 
	kindID int NOT NULL,
	afdelingsJaarID int NULL
)
;

CREATE TABLE lid.Leiding ( 
	DubbelPuntAbonnement bit NULL,
	leidingID int NOT NULL
)
;

CREATE TABLE lid.LeidingInAfdelingsJaar ( 
	afdelingsJaarID int NOT NULL,
	leidingID int NOT NULL
)
;

CREATE TABLE lid.Lid ( 
	LidgeldBetaald bit NULL,
	NonActief bit NULL,    --  Als de groep ervan uitgaat dat het lid niet meer komt, kan het lid op non actief gezet worden. 
	Verwijderd bit NULL,    --  Voor het einde van de instapperiode kunnen leden verwijderd worden.  Dat wordt hier aangevinkt.  Het record wordt niet verwijderd, om op die manier te kunnen onthouden dat de persoon al kandidaatlid is geweest. 
	VolgendWerkjaar smallint NULL,    --  Bij een nieuw werkjaar zijn er geen leden meer.  Maar aan de hand van wat er in 'VolgendWerkjaar' staat, kan het programma aangeven of er nog leden zijn die waarschijnlijk nog ingeschreven moeten worden. 
--  Als een lid van vorig werkjaar als toekomstperspectief 'KomtTerug' heeft, dan herinnert het programma er aan dat die persoon nog aangesloten moet worden.  Is het toekomstperspectief 'KomtNietTerug', dan zal het programma dat niet doen. 
	lidID int identity(1,1)  NOT NULL,
	groepsWerkjaarID int NOT NULL,
	gelieerdePersoonID int NOT NULL
)
;

CREATE TABLE lid.OfficieleAfdeling ( 
	Naam varchar(50) NOT NULL,
	officieleAfdelingID int identity(1,1)  NOT NULL
)
;


--  Create Primary Key Constraints 
ALTER TABLE lid.Afdeling ADD CONSTRAINT PK_Afdeling 
	PRIMARY KEY CLUSTERED (afdelingID)
;

ALTER TABLE lid.AfdelingsJaar ADD CONSTRAINT PK_AfdelingsJaar 
	PRIMARY KEY CLUSTERED (afdelingsJaarID)
;

ALTER TABLE lid.Kind ADD CONSTRAINT PK_Kind 
	PRIMARY KEY CLUSTERED (kindID)
;

ALTER TABLE lid.Leiding ADD CONSTRAINT PK_Leiding 
	PRIMARY KEY CLUSTERED (leidingID)
;

ALTER TABLE lid.LeidingInAfdelingsJaar ADD CONSTRAINT PK_LeidingInAfdelingsJaar 
	PRIMARY KEY CLUSTERED (leidingID, afdelingsJaarID)
;

ALTER TABLE lid.Lid ADD CONSTRAINT PK_Lid 
	PRIMARY KEY NONCLUSTERED (lidID)
;

ALTER TABLE lid.OfficieleAfdeling ADD CONSTRAINT PK_OfficieleAfdeling 
	PRIMARY KEY CLUSTERED (officieleAfdelingID)
;


--  Create Indexes 
ALTER TABLE lid.Afdeling
	ADD CONSTRAINT UQ_Afdeling UNIQUE (groepID, AfdelingsNaam)
;

CREATE UNIQUE CLUSTERED INDEX UQ_Lid
ON lid.Lid (groepsWerkjaarID ASC, gelieerdePersoonID ASC)
;

ALTER TABLE lid.OfficieleAfdeling
	ADD CONSTRAINT UQ_OfficieleAfdeling_Naam UNIQUE (Naam)
;


--  Create Foreign Key Constraints 
ALTER TABLE lid.Afdeling ADD CONSTRAINT FK_Afdeling_Groep 
	FOREIGN KEY (groepID) REFERENCES grp.Groep (groepID)
;

ALTER TABLE lid.AfdelingsJaar ADD CONSTRAINT FK_AfdelingsJaar_Afdeling 
	FOREIGN KEY (afdelingID) REFERENCES lid.Afdeling (afdelingID)
;

ALTER TABLE lid.AfdelingsJaar ADD CONSTRAINT FK_AfdelingsJaar_GroepsWerkjaar 
	FOREIGN KEY (groepsWerkjaarID) REFERENCES grp.GroepsWerkjaar (groepsWerkjaarID)
;

ALTER TABLE lid.AfdelingsJaar ADD CONSTRAINT FK_AfdelingsJaar_OfficieleAfdeling 
	FOREIGN KEY (officieleAfdelingID) REFERENCES lid.OfficieleAfdeling (officieleAfdelingID)
;

ALTER TABLE lid.Kind ADD CONSTRAINT FK_Kind_AfdelingsJaar 
	FOREIGN KEY (afdelingsJaarID) REFERENCES lid.AfdelingsJaar (afdelingsJaarID)
;

ALTER TABLE lid.Kind ADD CONSTRAINT FK_Kind_Lid 
	FOREIGN KEY (kindID) REFERENCES lid.Lid (lidID)
;

ALTER TABLE lid.Leiding ADD CONSTRAINT FK_Leiding_Lid 
	FOREIGN KEY (leidingID) REFERENCES lid.Lid (lidID)
;

ALTER TABLE lid.LeidingInAfdelingsJaar ADD CONSTRAINT FK_LeidingInAfdelingsJaar_AfdelingsJaar 
	FOREIGN KEY (afdelingsJaarID) REFERENCES lid.AfdelingsJaar (afdelingsJaarID)
;

ALTER TABLE lid.LeidingInAfdelingsJaar ADD CONSTRAINT FK_LeidingInAfdelingsJaar_Leiding 
	FOREIGN KEY (leidingID) REFERENCES lid.Leiding (leidingID)
;

ALTER TABLE lid.Lid ADD CONSTRAINT FK_Lid_GelieerdePersoon 
	FOREIGN KEY (gelieerdePersoonID) REFERENCES pers.GelieerdePersoon (GelieerdePersoonID)
;

ALTER TABLE lid.Lid ADD CONSTRAINT FK_Lid_GroepsWerkjaar 
	FOREIGN KEY (groepsWerkjaarID) REFERENCES grp.GroepsWerkjaar (groepsWerkjaarID)
;







EXEC sp_addextendedproperty 'MS_Description', 'De gebruiker van het programma kan afdelingen maken zo veel hij/zij wil.  Als een afdeling bestaat in een werkjaar, dan vormt de combinatie afdeling-werkjaar een ''Afdelingsjaar''.', 'Schema', lid, 'table', Afdeling
;




EXEC sp_addextendedproperty 'MS_Description', 'De velden ''van'' en ''tot'' geven aan welke leden er standaard in deze afdeling terecht komen.

Als voor ''ketiranten 2007-2008'' van=1991 en tot=1993, dan zullen leden die geboren zijn van 1991 t/m 1993 automatisch ''ketirant'' worden als ze zich aansluiten voor 2007-2008', 'Schema', lid, 'table', AfdelingsJaar
;
EXEC sp_addextendedproperty 'MS_Description', 'geboortejaar ''tot en met''', 'Schema', lid, 'table', AfdelingsJaar, 'column', GeboorteJaarTot
;

EXEC sp_addextendedproperty 'MS_Description', 'geboortejaar ''vanaf''', 'Schema', lid, 'table', AfdelingsJaar, 'column', GeboorteJaarVan
;





EXEC sp_addextendedproperty 'MS_Description', 'Een ''Kind'' is een lid dat geen leiding/kadermedewerker is.  Een kind is altijd gekoppeld aan een ''afdelingsjaar'' voor het werkjaar waarin het lid is.', 'Schema', lid, 'table', Kind
;
EXEC sp_addextendedproperty 'MS_Description', 'Er worden enkel  facturen gemaakt voor dit lid als deze datum gepasseerd is.  Tot dat moment kan de groep beslissen om deze persoon uit te schrijven.  Daarna vanzelfsprekend niet meer.', 'Schema', lid, 'table', Kind, 'column', EindeInstapPeriode
;



EXEC sp_addextendedproperty 'MS_Description', 'Een leid(st)er is een speciaal geval van een lid.  Gedurende een werkjaar kan een leid(st)er aan meerdere afdelingsjaren gekoppeld zijn.', 'Schema', lid, 'table', Leiding
;




EXEC sp_addextendedproperty 'MS_Description', 'Zowel leiding als ''kinderen'' zijn leden.  Van zodra je als lid in de database zit, ben je ''aangesloten'', en kan je in principe een factuur krijgen.

Een lid is standaard verzekerd voor burgerlijke aansprakelijkheid.', 'Schema', lid, 'table', Lid
;

EXEC sp_addextendedproperty 'MS_Description', 'Als de groep ervan uitgaat dat het lid niet meer komt, kan het lid op non actief gezet worden.', 'Schema', lid, 'table', Lid, 'column', NonActief
;

EXEC sp_addextendedproperty 'MS_Description', 'Voor het einde van de instapperiode kunnen leden verwijderd worden.  Dat wordt hier aangevinkt.  Het record wordt niet verwijderd, om op die manier te kunnen onthouden dat de persoon al kandidaatlid is geweest.', 'Schema', lid, 'table', Lid, 'column', Verwijderd
;

EXEC sp_addextendedproperty 'MS_Description', 'Bij een nieuw werkjaar zijn er geen leden meer.  Maar aan de hand van wat er in ''VolgendWerkjaar'' staat, kan het programma aangeven of er nog leden zijn die waarschijnlijk nog ingeschreven moeten worden.

Als een lid van vorig werkjaar als toekomstperspectief ''KomtTerug'' heeft, dan herinnert het programma er aan dat die persoon nog aangesloten moet worden.  Is het toekomstperspectief ''KomtNietTerug'', dan zal het programma dat niet doen.', 'Schema', lid, 'table', Lid, 'column', VolgendWerkjaar
;




EXEC sp_addextendedproperty 'MS_Description', 'De groepen kunnen ieder werkjaar naar hartelust zelf afdelingen uitvinden.  Maar elke afdeling moet gekoppeld zijn aan een ''officiele afdeling''.  De lijst van officiele afdelingen wordt nationaal beheerd.', 'Schema', lid, 'table', OfficieleAfdeling
;
